// Generated by gencpp from file target_merge/TargetMerged_Message.msg
// DO NOT EDIT!


#ifndef TARGET_MERGE_MESSAGE_TARGETMERGED_MESSAGE_H
#define TARGET_MERGE_MESSAGE_TARGETMERGED_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace target_merge
{
template <class ContainerAllocator>
struct TargetMerged_Message_
{
  typedef TargetMerged_Message_<ContainerAllocator> Type;

  TargetMerged_Message_()
    : header()
    , time(0.0)
    , id(0)
    , type(0)
    , x(0.0)
    , y(0.0)
    , cov()  {
      cov.assign(0.0);
  }
  TargetMerged_Message_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , id(0)
    , type(0)
    , x(0.0)
    , y(0.0)
    , cov()  {
  (void)_alloc;
      cov.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef boost::array<double, 4>  _cov_type;
  _cov_type cov;





  typedef boost::shared_ptr< ::target_merge::TargetMerged_Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::target_merge::TargetMerged_Message_<ContainerAllocator> const> ConstPtr;

}; // struct TargetMerged_Message_

typedef ::target_merge::TargetMerged_Message_<std::allocator<void> > TargetMerged_Message;

typedef boost::shared_ptr< ::target_merge::TargetMerged_Message > TargetMerged_MessagePtr;
typedef boost::shared_ptr< ::target_merge::TargetMerged_Message const> TargetMerged_MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::target_merge::TargetMerged_Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::target_merge::TargetMerged_Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::target_merge::TargetMerged_Message_<ContainerAllocator1> & lhs, const ::target_merge::TargetMerged_Message_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time == rhs.time &&
    lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.cov == rhs.cov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::target_merge::TargetMerged_Message_<ContainerAllocator1> & lhs, const ::target_merge::TargetMerged_Message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace target_merge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::target_merge::TargetMerged_Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::target_merge::TargetMerged_Message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::target_merge::TargetMerged_Message_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "250d30ca0eed93948b788af357245216";
  }

  static const char* value(const ::target_merge::TargetMerged_Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x250d30ca0eed9394ULL;
  static const uint64_t static_value2 = 0x8b788af357245216ULL;
};

template<class ContainerAllocator>
struct DataType< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "target_merge/TargetMerged_Message";
  }

  static const char* value(const ::target_merge::TargetMerged_Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64 time\n"
"uint8 id\n"
"uint8 type\n"
"float64 x\n"
"float64 y\n"
"float64[4] cov\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::target_merge::TargetMerged_Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetMerged_Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::target_merge::TargetMerged_Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::target_merge::TargetMerged_Message_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "cov[]" << std::endl;
    for (size_t i = 0; i < v.cov.size(); ++i)
    {
      s << indent << "  cov[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cov[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TARGET_MERGE_MESSAGE_TARGETMERGED_MESSAGE_H
